/*
//iterate through each observation and transform it to map frame
// OBS to MAP
std::vector<LandmarkObs> oberservations_map;

for (int j=0; j<observations.size(); j++){

  double x_o = observations[j].x;
  double y_o = observations[j].y;
  int id = observations[j].id; // shouldn't need this

  double x_m;
  double y_m;

  //rotate by theta and translate
  x_m = x_o*cos(p_theta) + y_o*sin(p_theta) + p_x;
  y_m = y_o*-1.0*sin(p_theta) + y_o*cos(p_theta) + p_y; //NEGATIVE SIN FOR Y AXIS DOWN?

  LandmarkObs obs_map;
  obs_map.x = x_m;
  obs_map.y = y_m;
  obs_map.id = id;

  observations_map.push_back(obs_map);
} */





void ParticleFilter::updateWeights(double sensor_range, double std_landmark[],
		std::vector<LandmarkObs> observations, Map map_landmarks) {
	// TODO: Update the weights of each particle using a mult-variate Gaussian distribution. You can read
	//   more about this distribution here: https://en.wikipedia.org/wiki/Multivariate_normal_distribution
	// NOTE: The observations are given in the VEHICLE'S coordinate system. Your particles are located
	//   according to the MAP'S coordinate system. You will need to transform between the two systems.
	//   Keep in mind that this transformation requires both rotation AND translation (but no scaling).
	//   The following is a good resource for the theory:
	//   https://www.willamette.edu/~gorr/classes/GeneralGraphics/Transforms/transforms2d.htm
	//   and the following is a good resource for the actual equation to implement (look at equation
	//   3.33. Note that you'll need to switch the minus sign in that equation to a plus to account
	//   for the fact that the map's y-axis actually points downwards.)
	//   http://planning.cs.uiuc.edu/node99.html

	// normal_distribution<double> x_lm(0, std_landmark[0]);
	// normal_distribution<double> y_lm(0, std_landmark[1]);

	//iterate through each particle
	for (int i=0; i<num_particles; i++){

		//current particle's position
		double p_x = particles[i].x;
		double p_y = particles[i].y;
		double p_theta = particles[i].theta;
		cout <<"p_x: "<<p_x<<" p_y: "<<p_y<< " p_theta: " << p_theta << endl;


		//LANDMARK TO PARTICLE FRAME
		//iterate through the map landmarks and transform them to particle frame
		std::vector<LandmarkObs> landmarks_p;
		for (int j=0; j < map_landmarks.landmark_list.size(); j++){
			double x_lm_m = map_landmarks.landmark_list[j].x_f;
			double y_lm_m = map_landmarks.landmark_list[j].y_f;
			int lm_id_m = map_landmarks.landmark_list[j].id_i;

			//apply -theta rotation and -p_xy translation
			double x_lm_p = x_lm_m*cos(p_theta) + y_lm_m*1.0*sin(p_theta) - p_x;
			double y_lm_p = x_lm_m*-1.0*sin(p_theta) + y_lm_m*cos(p_theta) - p_y; //NEGATIVE SIN FOR Y AXIS DOWN?

			// if we are in sensor range, append the landmark
			// USing the LandmarkObs class to store a list of predicted lms
			if (dist(0,0,x_lm_p, y_lm_p) <= sensor_range) {
				LandmarkObs lm_p;
				lm_p.x = x_lm_p;
				lm_p.y = y_lm_p;
				lm_p.id = lm_id_m;
				landmarks_p.push_back(lm_p);
				// cout << "x_p= " << x_lm_p << " y_p= " << y_lm_p <<endl;
				// cout << "x_m= " << x_lm_m << " y_m= " << y_lm_m <<endl;
				// cout << "p_x= " << p_x << " p_y= " << p_y << " p_theta= " << p_theta <<endl;
				// cout << dist(0,0,x_lm_p, y_lm_p) << endl;
				// cout << dist(x_lm_m, y_lm_m, p_x, p_y) <<endl;
			}
		}
		// cout << "particle #: " << i <<endl;
		// cout << "num lm in range: " << landmarks_p.size() <<endl;
		// cout << "num obs: " << observations.size() <<endl;
		dataAssociation(landmarks_p,observations);

		//calculate the weight of each particle
		double sigma_x = std_landmark[0];
		double sigma_y = std_landmark[1];
		double P = 1.0; // particles probability
		for (int k=0; k<observations.size(); k++){
			double x = observations[k].x;
			double y = observations[k].y;
			int id = observations[k].id; // associated LM ID
			double mu_x = 999.0;
			double mu_y = 999.0;
			// cout << "observation " << k << " associated with id " << id << endl;

			//search and match for the corresponding landmark ID
			for (int j=0; j<landmarks_p.size(); j++){

				// cout << "L id" << landmarks_p[j].id << endl;
				if (landmarks_p[j].id == id){
					mu_x = landmarks_p[j].x;
					mu_y = landmarks_p[j].y;
					// cout << "ASSOCIATED" << endl;
					// cout << mu_x << " <x> " << x <<endl;
					// cout << mu_y << " <y> " << y <<endl;
					break;
				}
				//cout << "NO ASSOCIATION" << endl;
			}
			//update the total probability
			double p = 1.0/2.0/M_PI/sigma_x/sigma_y*exp(-1.0*(pow(x-mu_x,2)/(2.0*sigma_x)+ pow(y-mu_y,2)/(2.0*sigma_y)));
			// cout << "p= " << p << endl;
			P = P*p;
		}
		particles[i].weight = P;
		weights[i] = P;
		cout << "P[" << i <<"]: " << P << endl;
	}

	//normalize weights 0..1
	// //find the max and min weights
	// double max_weight = 0.0;
	// double min_weight = 1.0;
	// for (int i=0; i<num_particles; i++){
	// 	if (particles[i].weight > max_weight){
	// 		max_weight = particles[i].weight;
	// 	}
	// 	if (particles[i].weight < min_weight){
	// 		min_weight = particles[i].weight;
	// 	}
	// }
	//
	// for (int i=0; i<num_particles; i++){
	// 	particles[i].weight = (particles[i].weight - min_weight)/(max_weight - min_weight);
	// 	// cout << "Pn[" << i <<"]: " << particles[i].weight << endl;
	// }


	// cout << "max_weight= " << max_weight << endl;
}
